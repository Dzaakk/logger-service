// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logs.proto

package logs

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LogService service

func NewLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LogService service

type LogService interface {
	WriteLog(ctx context.Context, in *LogRequest, opts ...client.CallOption) (*LogResponse, error)
}

type logService struct {
	c    client.Client
	name string
}

func NewLogService(name string, c client.Client) LogService {
	return &logService{
		c:    c,
		name: name,
	}
}

func (c *logService) WriteLog(ctx context.Context, in *LogRequest, opts ...client.CallOption) (*LogResponse, error) {
	req := c.c.NewRequest(c.name, "LogService.WriteLog", in)
	out := new(LogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogService service

type LogServiceHandler interface {
	WriteLog(context.Context, *LogRequest, *LogResponse) error
}

func RegisterLogServiceHandler(s server.Server, hdlr LogServiceHandler, opts ...server.HandlerOption) error {
	type logService interface {
		WriteLog(ctx context.Context, in *LogRequest, out *LogResponse) error
	}
	type LogService struct {
		logService
	}
	h := &logServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LogService{h}, opts...))
}

type logServiceHandler struct {
	LogServiceHandler
}

func (h *logServiceHandler) WriteLog(ctx context.Context, in *LogRequest, out *LogResponse) error {
	return h.LogServiceHandler.WriteLog(ctx, in, out)
}
